{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\n// import \"forge-std/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * It has the functionality to log base details and retrieve them using a unique id.\n * Additionally, the contract can store and update employees, as well as log and retrieve transaction details.\n * @author EmmanuelHaggai\n */\ncontract YourContract {\n    // State Variables\n    address public immutable owner;\n    string public greeting = \"Building Unstoppable Apps!!!\";\n    bool public premium = false;\n    uint256 public totalCounter = 0;\n    mapping(address => uint256) public userGreetingCounter;\n\n    // Struct to hold base details\n    struct BaseDetails {\n        uint256 id;\n        string phoneNumber;\n        string baseName;\n        string baseAddress;\n    }\n\n    // Struct to hold employee information\n    struct Employee {\n        uint256 employeeId;\n        string employeeName;\n        string employeePosition;\n    }\n\n    // Struct to hold transaction details\n    struct Transaction {\n        uint256 transactionId;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    // Mapping to store the BaseDetails by id\n    mapping(uint256 => BaseDetails) private baseDetailsMap;\n    // Mapping to store employee details by employeeId\n    mapping(uint256 => Employee) private employees;\n    // Mapping to store transaction details by transactionId\n    mapping(uint256 => Transaction) private transactions;\n\n    // Events\n    event GreetingChange(\n        address indexed greetingSetter,\n        string newGreeting,\n        bool premium,\n        uint256 value\n    );\n    event BaseDetailsLogged(\n        uint256 indexed id,\n        string phoneNumber,\n        string baseName,\n        string baseAddress\n    );\n    event EmployeeAdded(\n        uint256 employeeId,\n        string employeeName,\n        string employeePosition\n    );\n    event TransactionLogged(\n        uint256 indexed transactionId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    // Constructor\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\n    modifier isOwner() {\n        require(msg.sender == owner, \"Not the Owner\");\n        _;\n    }\n\n    /**\n     * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n     * @param _newGreeting (string memory) - new greeting to save on the contract\n     */\n    function setGreeting(\n        string memory _newGreeting\n    ) public payable {\n\n        greeting = _newGreeting;\n        totalCounter += 1;\n        userGreetingCounter[msg.sender] += 1;\n\n        if (msg.value > 0) {\n            premium = true;\n        } else {\n            premium = false;\n        }\n\n        emit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\n    }\n\n    /**\n     * Function that allows the owner to withdraw all the Ether in the contract\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\n     */\n    function withdraw() public isOwner {\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    /**\n     * Function to log base details into the contract\n     * @param _id (uint256) - unique ID for the base\n     * @param _phoneNumber (string memory) - phone number of the base\n     * @param _baseName (string memory) - name of the base\n     * @param _baseAddress (string memory) - address of the base\n     */\n    function logBaseDetails(\n        uint256 _id,\n        string memory _phoneNumber,\n        string memory _baseName,\n        string memory _baseAddress\n    ) public {\n        baseDetailsMap[_id] = BaseDetails(_id, _phoneNumber, _baseName, _baseAddress);\n        emit BaseDetailsLogged(_id, _phoneNumber, _baseName, _baseAddress);\n    }\n\n    /**\n     * Function to retrieve base details by id\n     * @param _id (uint256) - unique ID for the base\n     * @return (uint256, string memory, string memory, string memory) - returns base details\n     */\n    function getBaseDetails(uint256 _id) public view returns (\n        uint256,\n        string memory,\n        string memory,\n        string memory\n    ) {\n        BaseDetails memory details = baseDetailsMap[_id];\n        return (details.id, details.phoneNumber, details.baseName, details.baseAddress);\n    }\n\n    /**\n     * Function to add an employee to the contract\n     * @param _employeeId (uint256) - unique employee ID\n     * @param _employeeName (string memory) - name of the employee\n     * @param _employeePosition (string memory) - position of the employee\n     */\n    function addEmployee(\n        uint256 _employeeId,\n        string memory _employeeName,\n        string memory _employeePosition\n    ) public isOwner {\n        employees[_employeeId] = Employee(_employeeId, _employeeName, _employeePosition);\n        emit EmployeeAdded(_employeeId, _employeeName, _employeePosition);\n    }\n\n    /**\n     * Function to retrieve employee details by employeeId\n     * @param _employeeId (uint256) - unique employee ID\n     * @return (uint256, string memory, string memory) - returns employee details\n     */\n    function getEmployee(uint256 _employeeId) public view returns (\n        uint256,\n        string memory,\n        string memory\n    ) {\n        Employee memory employee = employees[_employeeId];\n        return (employee.employeeId, employee.employeeName, employee.employeePosition);\n    }\n\n    /**\n     * Function to log a transaction into the contract\n     * @param _transactionId (uint256) - unique transaction ID\n     * @param _from (address) - address of the sender\n     * @param _to (address) - address of the recipient\n     * @param _amount (uint256) - amount of the transaction\n     */\n    function logTransaction(\n        uint256 _transactionId,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public {\n        transactions[_transactionId] = Transaction(_transactionId, _from, _to, _amount, block.timestamp);\n        emit TransactionLogged(_transactionId, _from, _to, _amount, block.timestamp);\n    }\n\n    /**\n     * Function to retrieve transaction details by transactionId\n     * @param _transactionId (uint256) - unique transaction ID\n     * @return (uint256, address, address, uint256, uint256) - returns transaction details\n     */\n    function getTransaction(uint256 _transactionId) public view returns (\n        uint256,\n        address,\n        address,\n        uint256,\n        uint256\n    ) {\n        Transaction memory transaction = transactions[_transactionId];\n        return (\n            transaction.transactionId,\n            transaction.from,\n            transaction.to,\n            transaction.amount,\n            transaction.timestamp\n        );\n    }\n\n    /**\n     * Function that allows the contract to receive ETH\n     */\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}